"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var XLSX = require("xlsx");
var typescript_string_operations_1 = require("typescript-string-operations");
var wdio_report_events_1 = __importDefault(require("@rpii/wdio-report-events"));
var eventReporter = new wdio_report_events_1.default();
var DataDriven = /** @class */ (function () {
    function DataDriven() {
        this.pageObject = null;
        this.arrange = null;
        this.testFn = null;
        this.assert = null;
        this.fn = null;
    }
    DataDriven.prototype.withFunction = function (fn) {
        this.fn = fn;
        return this;
    };
    ;
    DataDriven.prototype.withPageObject = function (pageObject) {
        this.checkNoFunction();
        this.pageObject = pageObject;
        return this;
    };
    ;
    DataDriven.prototype.withArrange = function (arrange) {
        this.checkNoFunction();
        this.arrange = arrange;
        return this;
    };
    ;
    DataDriven.prototype.withTest = function (act) {
        this.checkNoFunction();
        this.testFn = act;
        return this;
    };
    ;
    DataDriven.prototype.withAssert = function (assert) {
        this.checkNoFunction();
        this.assert = assert;
        return this;
    };
    ;
    DataDriven.prototype.checkParameters = function (dataModel) {
        var self = this;
        if (!dataModel) {
            throw 'Data Model not initialized';
        }
        if (!self.fn) {
            if (!self.arrange) {
                throw 'Arrange not initialized';
            }
            if (!self.assert) {
                throw 'Assert not initialized';
            }
            if (!self.testFn) {
                throw 'Test Fn not initialized';
            }
        }
    };
    ;
    DataDriven.prototype.forCasesInSpreadsheet = function (filePath, sheetName) {
        var self = this;
        var workbook = XLSX.readFile(filePath);
        var worksheet = workbook.Sheets[sheetName];
        var dataModel = XLSX.utils.sheet_to_json(worksheet);
        self.checkParameters(dataModel);
        var exceptions = [];
        for (var i = 0; i < dataModel.length; i++) {
            console.log("running spreadsheet case: " + dataModel[i].name);
            self.runCase(dataModel[i], dataModel[i].name, function (ex) {
                exceptions.push(ex);
            });
        }
        if (exceptions.length > 0) {
            throw exceptions[0];
        }
    };
    ;
    DataDriven.prototype.forCases = function (cases) {
        var self = this;
        self.checkParameters(cases);
        var exceptions = [];
        for (var name_1 in cases) {
            if (cases.hasOwnProperty(name_1)) {
                self.runCase(cases[name_1], name_1, function (ex) {
                    exceptions.push(ex);
                });
            }
        }
        if (exceptions.length > 0) {
            throw exceptions[0];
        }
    };
    ;
    DataDriven.prototype.runCase = function (data, name, callback) {
        var self = this;
        if (data.disabled) {
            self.logCaseHeader(data, name);
        }
        else {
            if (self.fn) {
                self.logCaseHeader(data, name);
                self.fn(data, name);
            }
            else {
                self.logCaseHeader(data, name);
                self.arrange(function () {
                    if (self.testFn) {
                        console.log('execute Test');
                        if (self.pageObject) {
                            self.testFn(self.pageObject, data);
                        }
                        else {
                            self.testFn(data);
                        }
                    }
                    console.log('execute Assert');
                    // dont kill test iteration
                    try {
                        self.assert(data, name);
                    }
                    catch (ex) {
                        console.log("caught test iteration exception");
                        if (callback) {
                            callback(ex);
                        }
                    }
                });
            }
        }
    };
    ;
    DataDriven.prototype.logCaseHeader = function (data, name) {
        var filteredData = Object.assign({}, data);
        if (filteredData.password) {
            filteredData.password = "********";
        }
        var message = 'Test Iteration with: ' + name + ': ' + JSON.stringify(filteredData);
        console.log(message);
        eventReporter.logMessage(typescript_string_operations_1.String.Format("Test Iteration with: {0}", name));
    };
    ;
    DataDriven.prototype.checkNoFunction = function () {
        if (this.fn) {
            throw "Function already initialized";
        }
    };
    ;
    return DataDriven;
}());
exports.default = DataDriven;
