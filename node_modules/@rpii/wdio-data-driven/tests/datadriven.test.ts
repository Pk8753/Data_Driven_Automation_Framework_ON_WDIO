import DataDriven from "../src/wdio-data-driven" ;
import  { expect } from  "chai";

export class DataDrivenTest {
    public execute(dataRow:any, assertion:any) {
        console.log(dataRow) ;
        assertion(dataRow) ;
        return this;
    }
    public assertTestName = (dataRow:any) => {
        console.log('assertTestName');
        expect(dataRow.name,  "Test name is valid").to.contain("Test");
    }
    public assertMissingPassword = (dataRow:any) => {
        expect(dataRow.password,  "Password is not empty").to.contain("Test");
    }
}


suite('test suite', function () {

    test('data driven use variable asserts', function (done) {
        let assertMissingPassword = (dataRow:any, name:string) => {
            let re = new RegExp('[^]*', 'g');
            expect(dataRow.password,  "Password is not empty").to.match(re);
        }
        // . Create "test blank"
        let testBlank = new DataDriven()
            .withArrange(function(cb:any) {
                console.log("start arrange");
                cb();
                })
            .withTest(function(dataRow:any) {
                console.log("start test");
                // this.browser.page.login().section.loginForm.fillAndSubmit(dt.email, dt.pass)
                })
            .withAssert((dataRow:any, name:string) => assertMissingPassword(dataRow, name))
            .forCasesInSpreadsheet('./tests/data/credentials.xlsx', 'bad-credentials');
        done();

    });

    test('data driven use Function', function (done) {
        let test = new DataDrivenTest() ;
        new DataDriven()
            .withFunction(  function(dataRow:any, name:string) {
                test.execute(dataRow, () => {test.assertTestName(dataRow)});
            })
            .forCasesInSpreadsheet('./tests/data/credentials.xlsx', 'bad-credentials');
        done();
    });
});
